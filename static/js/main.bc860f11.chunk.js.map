{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","msg","Navbar","mode","href","title","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aboutText","onClick","toggleMode","htmlFor","enableMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","getText","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","_useState3","_useState4","setEnableMode","_useState5","_useState6","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bc860f11.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  // const capitalize = (word)=>{\r\n  //   const capital=word.toLowerCase();\r\n  //   return capital.charAt(0).toUpperCase()+capital.slice(1)\r\n  // }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type}  alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n  \r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav mr-auto\">\r\n        <li className=\"nav-item active\">\r\n          <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li>\r\n  \r\n    \r\n      </ul>\r\n      {/* <form className=\"form-inline my-2 my-lg-0\">\r\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    <div className={`custom-control custom-switch text-${props.mode==='light'?'dark':'light'} `}>\r\n  <input type=\"checkbox\" className=\"custom-control-input\" onClick={props.toggleMode} id=\"customSwitch1\"/>\r\n  <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">{props.enableMode}</label>\r\n</div>\r\n    </div>\r\n  </nav>\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title:PropTypes.string,\r\n    aboutText:PropTypes.string\r\n\r\n}","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=>{\r\n    let newText=text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to uppercase\",\"success\");\r\n  }\r\n  const handleLoClick=()=>{\r\n    let newText=text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to lowercase\",\"success\");\r\n  }\r\n\r\n  const handleClearClick=()=>{\r\n    let newText=\"\";\r\n    setText(newText)\r\n  }\r\n  const handleCopy=()=>{\r\n    let getText=document.getElementById(\"textarea\");\r\n    getText.select();\r\n    navigator.clipboard.writeText(getText.value);\r\n    props.showAlert(\"Copied to clipboard!\",\"success\");\r\n  }\r\n  const handleExtraSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\",\"success\");\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    // console.log(\"onChange methods running\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const [text, setText] = useState(\"Enter your text here\");\r\n  \r\n  return (\r\n    <>\r\n    <div className=\"conatiner\" style={{ color:props.mode==='dark'?'white':'black'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"form-group\">\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor:props.mode==='dark'?'grey':'white',\r\n  color:props.mode==='dark'?'white':'black'}} id=\"textarea\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className='btn btn-primary' onClick={handleUpClick}>Convert to uppercase</button>\r\n    <button className='btn btn-primary mx-2' onClick={handleLoClick}>Convert to Lowercase</button>\r\n    <button className='btn btn-primary mx-2' onClick={handleClearClick}>Clear Text</button>\r\n    <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy Text</button>\r\n    <button className='btn btn-primary mx-2' onClick={handleExtraSpaces}>Remove Extra spaces</button>\r\n    </div>\r\n\r\n    <div className=\"container my-3\" style={{ color:props.mode==='dark'?'white':'black'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length } Minutes</p>\r\n\r\n      <h2 className=\"my-3\">Preview</h2>\r\n      <p>{text.length >0 ?text :'Enter something to above textarea to preview it here '}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport React from \"react\";\nimport { useState } from \"react\";\n\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [enableMode, setEnableMode] = useState(\"Enable dark  mode\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      showAlert(null);\n    }, 3000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      setEnableMode(\"Enable light Mode\");\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      setEnableMode(\"Enable dark mode\");\n      showAlert(\"light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n        {/* <Navbar title=\"TextUtils\" aboutText=\"About\"/> */}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About\"\n          mode={mode}\n          toggleMode={toggleMode}\n          enableMode={enableMode}\n          />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n            {/* <About /> */}\n\n              <TextForm\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n                \n                showAlert={showAlert}\n                />\n        </div>\n  \n  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}